/*
 * Peg solitaire solver
 *
 * 15-122 Principles of Imperative Computation */

#use <args>
#use <conio>
#use <util>

typedef int move;

int row_start(move m)
  ;

int col_start(move m)
  ;

int row_end(move m)
  ;

int col_end(move m)
  ;


int row_start(move m){
  int x = m / 1000;
  x %= 10;
  return x;
}

int col_start(move m){
  int y = m / 100;
  y %= 10;
  return y;
}

int row_end(move m){
  int x = m /10;
  x %= 10;
  return x;
}

int col_end(move m){
  int y = m;
  return y%10;
}

int to(int r, int c){
  return r*8 + c;
}

move op(int r_s, int c_s, int r_e, int c_e)
{
  return r_s*1000 + c_s*100 + r_e*10 + c_e;
}

int solve(board B, stack S, int res, int[] dx, int[] dy)
//@requires is_board(B);
//@requires num_pegs(B) >= 1;
//@requires is_stack(S);
//@ensures is_board(B);
{
  if(res == 1) return 1;
  move now = 0;
  for(int x = 0; x < 8; x++){
    for(int y = 0; y < 8; y++){
      if(B[to(x, y)] == 1){
        for(int i = 0; i < 4; i++){
          int tx = x + dx[i];
          int ty = y + dy[i];
          if(0 <= tx && tx < 8 && 0 <= ty && ty < 8 && B[to(tx, ty)] == 1){
            tx += dx[i];  ty += dy[i];
            if(0 <= tx && tx < 8 && 0 <= ty && ty < 8 && B[to(tx, ty)] == 0){
              now = op(x, y, tx, ty);
              B[to(x, y)] = 0;  
              B[to(x + dx[i], y + dy[i])] = 0;  
              B[to(tx, ty)] = 1;
              if(solve(B, S, res-1, dx, dy) == 1){
                push(S, now);
                return 1;
              }
              B[to(x, y)] = 1;  
              B[to(x + dx[i], y + dy[i])] = 1;  
              B[to(tx, ty)] = 0;
            }
          }
        }
      }
    }
  }
  return 0;
}

int peg_solve(board B, stack S)
//@requires is_board(B);
//@requires num_pegs(B) >= 1;
//@requires stack_empty(S);
//@ensures is_board(B);
//@ensures \result >= 1;
{
  int[] dx = alloc_array(int, 4);
  int[] dy = alloc_array(int, 4);
  dx[0] = -1;  dx[1] = 0;  dx[2] = 0;  dx[3] = 1;
  dy[0] = 0;  dy[1] = -1;  dy[2] = 1;  dy[3] = 0;
  if(solve(B, S, num_pegs(B), dx, dy) == 1){
    return 1;
  }else{
    return num_pegs(B);
  }
}