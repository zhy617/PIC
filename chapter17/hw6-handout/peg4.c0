/*
 * Peg solitaire solver
 *
 * 15-122 Principles of Imperative Computation */

#use <args>
#use <conio>
#use <util>

/*
 * Peg solitaire solver
 *
 * 15-122 Principles of Imperative Computation */


typedef int move;

int row_start(move m)
  ;

int col_start(move m)
  ;

int row_end(move m)
  ;

int col_end(move m)
  ;


int row_start(move m){
  int x = m / 1000;
  x %= 10;
  return x;
}

int col_start(move m){
  int y = m / 100;
  y %= 10;
  return y;
}

int row_end(move m){
  int x = m /10;
  x %= 10;
  return x;
}

int col_end(move m){
  int y = m;
  return y%10;
}

int to(int r, int c){
  return r*8 + c;
}

move op(int r_s, int c_s, int r_e, int c_e)
{
  return r_s*1000 + c_s*100 + r_e*10 + c_e;
}

bool chk(board A, board B)
//@requires \length(A) == \length(B);
//@requires \length(A) == 64;
{
  for(int i = 0; i < 64; i++){
    if(A[i] != B[i])return false;
  }
  return true;
}

htelem trans(board B)
//@requires is_board(B);
{
  htelem now = alloc(struct two_ints);
  now->i1 = 0;
  for(int i = 0; i < 32; i++){
    if(B[i] == 1)now->i1 = now->i1 * 2 + 1;
    else now->i1 = now->i1 * 2;
  }
  now->i2 = 0;
  for(int i = 32; i < 64; i++){
    if(B[i] == 1)now->i2 = now->i2 * 2 + 1;
    else now->i2 = now->i2 * 2;
  }
  now->best_num_pegs = num_pegs(B);
  return now;
}

int solve1(board B, stack S, ht H, int res, int[] dx, int[] dy,
            ht H_B, board fin)
//@requires is_board(B);
//@requires is_ht(H);
//@requires num_pegs(B) >= 1;
//@requires is_stack(S);
//@ensures is_board(B);
{
  htelem nowhtkey = trans(B);
  // if(res < 3)printint(res);
  if(res == 0){
    htelem B_to_find = ht_lookup(H_B, nowhtkey);
    if(B_to_find != NULL){
      // fin = alloc_array(int, 64);
      for(int i = 0; i < 64; i++)fin[i] = B[i];
      // print_board(fin);
      return B_to_find->best_num_pegs;
    }
    return 64;
  }
  htelem tofind = ht_lookup(H, nowhtkey);
  if(tofind != NULL)return tofind->best_num_pegs;
  move now = 0;
  int least = num_pegs(B);
//   board A = alloc_array(int, 64);
//   for(int i = 0; i < 64; i++)A[i] = B[i];
  for(int x = 0; x < 8; x++){
    for(int y = 0; y < 8; y++){
      if(B[to(x, y)] == 1){
        for(int i = 0; i < 4; i++)
        // @loop_invariant chk(A, B);
        {
          int tx = x + dx[i];
          int ty = y + dy[i];
          if(0 <= tx && tx < 8 && 0 <= ty && ty < 8 
          && B[to(tx, ty)] == 1){
            tx += dx[i];  ty += dy[i];
            if(0 <= tx && tx < 8 && 0 <= ty && ty < 8 
            && B[to(tx, ty)] == 0){
              now = op(x, y, tx, ty);
              B[to(x, y)] = 0;  
              B[to(x + dx[i], y + dy[i])] = 0;  
              B[to(tx, ty)] = 1;
              least = min(least, solve1(B, S, H, res-1, dx, dy, H_B, fin));
              if(least == 1){
                push(S, now);
                return 1;
              }
              B[to(x, y)] = 1;  
              B[to(x + dx[i], y + dy[i])] = 1;  
              B[to(tx, ty)] = 0;
            }
          }
        }
      }
    }
  }
  if(least != 1){
    nowhtkey->best_num_pegs = least;
    ht_insert(H, nowhtkey);
  }
  return least;
}

void search(board B, ht H, int res, int[] dx, int[] dy)
//@requires is_board(B);
//@requires is_ht(H);
//@requires num_pegs(B) >= 1;
//@ensures is_board(B);
{
  
  htelem nowhtkey = trans(B);
  htelem tofind = ht_lookup(H, nowhtkey);
  if(tofind != NULL)return ;
  nowhtkey->best_num_pegs = 1;
  ht_insert(H, nowhtkey);
  if(res == 0) return ;
  // move now = 0;
  for(int x = 0; x < 8; x++){
    for(int y = 0; y < 8; y++){
      if(B[to(x, y)] == 1){
        for(int i = 0; i < 4; i++)
        // @loop_invariant chk(A, B);
        {
          int tx = x + dx[i];
          int ty = y + dy[i];
          if(0 <= tx && tx < 8 && 0 <= ty && ty < 8 
          && B[to(tx, ty)] == 0){
            tx += dx[i];  ty += dy[i];
            if(0 <= tx && tx < 8 && 0 <= ty && ty < 8 
            && B[to(tx, ty)] == 0){
              // now = op(x, y, tx, ty);
              B[to(x, y)] = 0;  
              B[to(x + dx[i], y + dy[i])] = 1;  
              B[to(tx, ty)] = 1;
              // least = min(least, solve1(B, S, H, res-1, dx, dy));
              // if(least == 1){
              //   push(S, now);
              //   return 1;
              // }
              search(B, H, res-1, dx, dy);
              B[to(x, y)] = 1;  
              B[to(x + dx[i], y + dy[i])] = 0;  
              B[to(tx, ty)] = 0;
            }
          }
        }
      }
    }
  }
  // if(least != 1){
  //   nowhtkey->best_num_pegs = least;
  //   ht_insert(H, nowhtkey);
  // }
  // return least;
  return ;
}

int solve2(board B, stack S, ht H, int res, int[] dx, int[] dy)
//@requires is_board(B);
//@requires is_ht(H);
//@requires num_pegs(B) >= 1;
//@requires is_stack(S);
//@ensures is_board(B);
{
  htelem nowhtkey = trans(B);
  if(res == 0){
    return 1;
  }
  htelem tofind = ht_lookup(H, nowhtkey);
  if(tofind != NULL)return tofind->best_num_pegs;
  move now = 0;
  int least = num_pegs(B);
//   board A = alloc_array(int, 64);
//   for(int i = 0; i < 64; i++)A[i] = B[i];
  for(int x = 0; x < 8; x++){
    for(int y = 0; y < 8; y++){
      if(B[to(x, y)] == 1){
        for(int i = 0; i < 4; i++)
        // @loop_invariant chk(A, B);
        {
          int tx = x + dx[i];
          int ty = y + dy[i];
          if(0 <= tx && tx < 8 && 0 <= ty && ty < 8 
          && B[to(tx, ty)] == 1){
            tx += dx[i];  ty += dy[i];
            if(0 <= tx && tx < 8 && 0 <= ty && ty < 8 
            && B[to(tx, ty)] == 0){
              now = op(x, y, tx, ty);
              B[to(x, y)] = 0;  
              B[to(x + dx[i], y + dy[i])] = 0;  
              B[to(tx, ty)] = 1;
              least = min(least, solve2(B, S, H, res-1, dx, dy));
              if(least == 1){
                push(S, now);
                return 1;
              }
              B[to(x, y)] = 1;  
              B[to(x + dx[i], y + dy[i])] = 1;  
              B[to(tx, ty)] = 0;
            }
          }
        }
      }
    }
  }
  if(least != 1){
    nowhtkey->best_num_pegs = least;
    ht_insert(H, nowhtkey);
  }
  return least;
}

void pre_solve(board B, ht H, int nums)
//@requires is_ht(H);
//@requires is_board(B);
{
  int[] dx = alloc_array(int, 4);
  int[] dy = alloc_array(int, 4);
  // dx[0] = -1;  dx[1] = 0;  dx[2] = 0;  dx[3] = 1;
  // dy[0] = 0;  dy[1] = -1;  dy[2] = 1;  dy[3] = 0;

  dx[0] = 1;  dx[1] = 0;  dx[2] = 0;  dx[3] = -1;
  dy[0] = 0;  dy[1] = 1;  dy[2] = -1;  dy[3] = 0;
  board B_new = alloc_array(int, 8*8);
  for(int i = 0; i < 64; i++){
    for(int j = 0; j < 64; j++){
      if(B[j] == -1){
        B_new[j] = -1;
      }else{
        if(i == j){
          B_new[j] = 1;
        }else{
          B_new[j] = 0;
        }
      }
    }
    if(B[i] != -1)search(B_new, H, nums, dx, dy);
  }
}

int peg_solve(board B, stack S)
//@requires is_board(B);
//@requires num_pegs(B) >= 1;
//@requires stack_empty(S);
//@ensures is_board(B);
//@ensures \result >= 1;
{

  int[] dx = alloc_array(int, 4);
  int[] dy = alloc_array(int, 4);
  // dx[0] = 1;  dx[1] = 0;  dx[2] = 0;  dx[3] = -1;
  // dy[0] = 0;  dy[1] = 1;  dy[2] = -1;  dy[3] = 0;

  dx[0] = 1;  dx[1] = 0;  dx[2] = -1;  dx[3] = 0;
  dy[0] = 0;  dy[1] = 1;  dy[2] = 0;  dy[3] = -1;
  ht H = ht_new(13333331);
  ht H_B = ht_new(13333331);
  int nums = num_pegs(B);
  int pre_nums = 9;
  nums -= 1 + pre_nums;
  pre_solve(B, H_B, pre_nums);
  int[] fin = alloc_array(int, 8*8);
  int[] tmp = alloc_array(int, 8*8);
  int[] init_B = alloc_array(int, 64);
  for(int i = 0; i < 64; i++)init_B[i] = B[i];
  // int ans = solve3(B, S, H, num_pegs(B), dx, dy, order);
  int ans = solve1(B, stack_new(), ht_new(133331), nums, dx, dy, H_B, fin);
  // print_board(fin);
  // printint(ans);
  solve2(fin, S, H, pre_nums, dx, dy);
  solve1(init_B, S, H, nums, dx, dy, H_B, fin);
  
  
  printint(ht_size(H));
  println("\n");
  ht_stats(H);
  return ans;
}