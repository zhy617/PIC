#use <util>
#use <conio>
// int abs(int x){
// 	if(x<0)return -x;
// 	else return x;
// }
int find(int x)
{
	int i=0;
	int pre=x;
	for(;i<=32;i++){
		x<<=1;
		if((x>0&&pre<=0)||(x<=0&&pre>0))return i;
		pre=x;
	}
	return i;
}
int pd(int x,int i){
	if((x&((1<<i)-1))!=0){
		return 1;
	}else{
		return 0;
	}
	
}
int quot(int x,int y)
//@requires y!=0;
//@ensures \result == x/y;
{
	int ans=0;
	int fl=0;
	int px=x;
	int py=y;
	if(x==int_min()&&y==-1)error("Overflow");
	if(x==int_min()&&y==int_min())return 1;
	if(y==int_min())return 0;
	if((px^py)<0)fl=1;
	if(px>0){px=-px;py=-py;}
	for(int i=31;i>=0;i--){
		if((px>>i)+pd(px,i)<=-abs(py)){
			ans+=(1<<i);
			px+=(abs(py)<<i);
		}
	}
	// printint(ans);
	// printint(fl);
	return fl==1 ? -ans:ans;
}
int rem(int x,int y)
//@requires y!=0;
//@ensures \result == x%y;
{
	int qu=quot(x,y);
	return x-qu*y;
}
void test(){
	for(int i=-100;i<=100;i++){
		//printint(i);
		for(int j=-100;j<=100;j++){
			if(j!=0){
				quot(i,j);
				rem(i,j);
				if(quot(i,j)*j+rem(i,j)!=i){
					error("nop");
				}
			}

		}
	}
}

