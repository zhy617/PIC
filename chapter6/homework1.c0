#use <util>
#use <file>
#use <conio>
#use <string>
#use <parse>
bool is_sorted(int[ ] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
    for (int i = lower; i < upper-1; i++)
    //@loop_invariant lower <= i;
        if (!(A[i] <= A[i+1])) return false;
        return true;
}
bool is_in(int x, int[ ] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
    for (int i = lower; i < upper; i++)
	//@loop_invariant lower <= i && i <= upper;
	{
	    if (A[i] == x) return true;
	}
	return false;
}

 
int binsearch_before(int x, int[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (-1 == \result && !is_in(x, A, 0, n))
|| ((0 <= \result && \result < n) && A[\result] == x);
@*/
{ 
    int lower = 0;
    int upper = n;
    while (lower < upper)
    //@loop_invariant 0 <= lower && lower <= upper && upper <= n;
    //@loop_invariant (lower == 0 || A[lower-1] < x);
    //@loop_invariant (upper == n || A[upper] > x);
    { 
        int mid = lower + (upper-lower)/2;
        //@assert lower <= mid && mid < upper;
        if (A[mid] == x) return mid;
        else if (A[mid] < x) lower = mid+1;
        else /*@assert(A[mid] > x);@*/
        upper = mid;
    }
    return -1;
}


int binsearch_final(int x, int[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (-1 == \result && !is_in(x, A, 0, n))
|| ((0 <= \result && \result < n) && A[\result] == x);
@*/
{ 
    int lower = 0;
    int upper = n - 1;
    while (lower < upper)
    //@loop_invariant 0 <= lower && upper <= n - 1;
    //@loop_invariant (lower == 0 || A[lower - 1] < x);
    //@loop_invariant (upper == n - 1 || A[upper + 1] > x);
    { 
        int mid = lower + (upper-lower)/2;
        //@assert lower <= mid && mid < upper;
        if (A[mid] == x) return mid;
        else if (A[mid] < x) lower = mid+1;
        else /*@assert(A[mid] > x);@*/
        upper = mid - 1;
    }
    return -1;
}
int readint(file_t in_file){
    return *parse_int(file_readline(in_file),10);
}
void test(){
    string path = "in1.txt";
    file_t in_file = file_read(path);
    int x=readint(in_file);
    int n=readint(in_file);
    int[] A = alloc_array(int, n);
    for(int i=0;i<n;i++){
        A[i]=readint(in_file);
    }
    printint(binsearch_final(x, A, n));
}